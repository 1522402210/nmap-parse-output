#!/bin/bash

# Get script path
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
SCRIPT_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

xslt_dir=$SCRIPT_DIR/nmap-parse-output-xslt

# Show help:
if [ $# -lt 2 ]
then
     echo "Usage: $0 NMAP_XML_OUTPUT COMMAND [OPTIONS]..."
     echo 
     echo "Converts/manipulates/extracts data from nmap scan XML output."
     echo 
     #echo "Global Options:"
     #echo -e "  -w\t Write Output File"
     echo "Commands:"
     for fullf in $xslt_dir/*.xslt; do
        f=$(basename $fullf)
        echo -e -n "  ${f%.*} "
        xmllint --xpath "//*[local-name()='comment' and namespace-uri()='http://xmlns.sven.to/npo']/text()" $fullf 2>/dev/null || echo -e "\n\t(No documentation)"
     done
     
     echo
     echo "[v1.3.0]"
     
     exit 1
fi

# Check if xsltproc is installed
command -v xsltproc >/dev/null 2>&1 || { echo "Please install xsltproc.  Aborting." >&2; exit 1; }

NMAP_XML_OUTPUT=$1

# Check if input is readable
[ -f "$NMAP_XML_OUTPUT" -o "$NMAP_XML_OUTPUT" = "-" ] || { echo "Can't read nmap file.  Aborting." >&2; exit 1; }

xslt=$xslt_dir/$2.xslt

[ -f $xslt ] || { echo "Unknown command: $2.  Aborting." >&2; exit 1; }

# Read post process command from xslt:
POST_PIPE=`xmllint --xpath "//*[local-name()='post-processor' and namespace-uri()='http://xmlns.sven.to/npo']/text()" $xslt 2>/dev/null`

# Pass remaining parameters to xslt:
EXTRA_PARAMS=()
i=0
shift
shift
while [ $# -gt 0 ]
do
  ((i++))
  EXTRA_PARAMS+=(--stringparam "param$i" "$1")
  shift
done

if [ -n "$POST_PIPE" ]; then
  xsltproc "${EXTRA_PARAMS[@]}" $xslt "$NMAP_XML_OUTPUT" | bash -c "cat - | $POST_PIPE"
else
  xsltproc "${EXTRA_PARAMS[@]}" $xslt "$NMAP_XML_OUTPUT"
fi

